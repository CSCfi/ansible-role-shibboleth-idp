- name: Configurable | OIDCStepUpServer | dependency | oidc
  include: oidc.yml
  when: "'oidc' not in confs"

- name: Configurable | OIDCStepUpServer | Download | Plugin v{{ shibbolethidp_oidcstepupserver_version }}
  unarchive:
    extra_opts: ['--strip-components=1']
    src: "{{ shibbolethidp_oidcstepupserver_location }}/releases/download/v{{ shibbolethidp_oidcstepupserver_version }}/idp-stepup-distribution-{{ shibbolethidp_oidcstepupserver_version | regex_replace('[^0-9RC.-]', '') }}-bin.tar.gz"
    remote_src: yes
    dest: "{{ shibbolethidp_idp_home }}"
    creates: "{{ shibbolethidp_idp_home }}/edit-webapp/WEB-INF/lib/idp-stepup-api-{{ shibbolethidp_oidcstepupserver_version | regex_replace('[^0-9RC.-]', '') }}.jar"
  notify: reown shibboleth-idp

- name: Configurable | OIDCStepUpServer | Detect | Duplicate | Plugins
  find:
    paths: "{{ shibbolethidp_idp_home }}/edit-webapp/WEB-INF/lib"
    patterns: "^(?!.*({{ shibbolethidp_oidcstepupserver_version | regex_replace('[^0-9RC.-]', '') }})).*idp-stepup"
    use_regex: true
  register: files_to_delete

- name: Configurable | OIDCStepUpServer | Delete | Older | Plugins
  file:
    path: "{{ shibbolethidp_item.path }}"
    state: absent
  with_items: "{{ files_to_delete.files }}"
  loop_control:
    loop_var: shibbolethidp_item

#- name: Shibboleth IdP | OIDC | Import OIDC extension configuration files
# =======================================================================

- name: Configurable | OIDCStepUpServer | Configure | Flow | Insert | general-authn.xml
  blockinfile:
    dest: "{{ shibbolethidp_idp_home }}/conf/authn/general-authn.xml"
    marker: "    <!-- {mark} ansible managed - stepup-flow -->"
    insertafter: 'default-destroy-method="destroy"'
    content: |2
          <bean id="authn/Stepup" parent="shibboleth.AuthenticationFlow" p:passiveAuthenticationSupported="false" p:forcedAuthenticationSupported="true" >
            <property name="supportedPrincipals">
              <list>
                <bean parent="shibboleth.OIDCAuthnContextClassReference" c:classRef="https://refeds.org/profile/mfa" />
              </list>
            </property>
          </bean>

- name: Configurable | OIDCStepUpServer | Configure | Flows | idp.properties
  lineinfile:
    dest: "{{ shibbolethidp_idp_home }}/conf/idp.properties"
    regexp: ^(?!.*{{ shibbolethidp_item }})(idp.authn.flows=.*)$
    line: \1|{{ shibbolethidp_item }}
    backrefs: yes
  with_items: Stepup
  loop_control:
    loop_var: shibbolethidp_item
  notify:
    - restart shibboleth-idp

- name: Configurable | OIDCStepUpServer | Remove | subject | attribute-resolver.xml
  xml:
    xpath: "//x:AttributeResolver/x:AttributeDefinition[@id='subject']"
    ensure: "absent"
    file: "{{ shibbolethidp_idp_home }}/conf/attribute-resolver.xml"
    namespaces:
      x: urn:mace:shibboleth:2.0:resolver
  notify: restart shibboleth-idp

- name: Configurable | OIDCStepUpServer | Configure | subject | attribute-resolver.xml
  blockinfile:
    dest: "{{ shibbolethidp_idp_home }}/conf/attribute-resolver.xml"
    marker: "    <!-- {mark} ansible managed - stepup subject -->"
    insertafter: 'Core schema attributes'
    content: |2
          <AttributeDefinition id="subject" xsi:type="ScriptedAttribute">
            <Script><![CDATA[
              logger = Java.type("org.slf4j.LoggerFactory").getLogger("fi.csc.idp.attribute.resolver.subjectbuilder");
              outboundMessageCtx = profileContext.getOutboundMessageContext();
              if (outboundMessageCtx != null) {
                oidcResponseContext = outboundMessageCtx.getSubcontext("org.geant.idpextension.oidc.messaging.context.OIDCAuthenticationResponseContext");
                if (oidcResponseContext != null) {
                  subject.addValue(oidcResponseContext.getRequestedSubject());
                  logger.debug("subject value: " + subject.getValues().get(0));
                } else {
                  logger.warn("RP has not requested subject, unable to produce subject");
                }
              } else {
                logger.warn("No oidc response context, unable to produce subject");
              }
            ]]></Script>
            <AttributeEncoder xsi:type="oidcext:OIDCString" name="sub" />
          </AttributeDefinition>

- name: Configurable | OIDCStepUpServer | 
  lineinfile: dest={{ shibbolethidp_idp_home }}/conf/authn/stepup.properties regexp="^#?\s*({{ item_stepup.option }}\s*=)" backrefs=yes  line="\\1 {{ item_stepup.value }}"
  with_items:
    - { option: 'stepup.SMSAccount.sender', value: "{{ shibbolethidp_stepupSMSAccountSender }}", state: present }
    - { option: 'stepup.SMSAccount.sid', value: "{{ shibbolethidp_stepupSMSAccountSid }}", state: present }
    - { option: 'stepup.SMSAccount.token', value: "{{ shibbolethidp_stepupSMSAccountToken }}", state: present }
    - { option: 'stepup.ShibStorageAccountStorageEncryptor.encryptKey', value: "{{ shibbolethidp_stepupEncryptKey }}", state: present }
    - { option: 'stepup.ShibStorageAccountStorage.storageservice', value: "{{ shibbolethidp_stepupStorageService }}", state: present }
    - { option: 'stepup.api.tokenvalidator', value: "{{ shibbolethidp_stepupTokenValidator }}", state: present }
    - { option: 'stepup.UserInfoTokenValidator.userinfoendpoint', value: "{{ shibbolethidp_stepupUserinfoEndpoint }}", state: present }
  loop_control:
    loop_var: item_stepup

- name: Configurable | OIDCStepUpServer | Configure | idp.properties | (to include /conf/authn/stepup.properties)
  lineinfile:
    dest: "{{ shibbolethidp_idp_home }}/conf/idp.properties"
    regexp: ^(?!.*idp-oauth2-deviceflow)(idp.additionalProperties.*)$
    line: '\1, /conf/authn/stepup.properties'
    backrefs: yes

- name: Shibboleth IdP | Configure | MyDataSource
  blockinfile:
    dest: "{{ shibbolethidp_idp_home }}/conf/global.xml"
    marker: "  <!-- {mark} Ansible Managed JPAStorageService -->"
    insertbefore: "</beans>"
    content: |2
        <bean id="shibboleth.JPAStorageService.DataSource" class="org.apache.commons.dbcp2.BasicDataSource" p:driverClassName="org.mariadb.jdbc.Driver"
              p:url="jdbc:mariadb://{{ shibbolethidp_dbhost }}:{{ shibbolethidp_dbport }}/{{ shibbolethidp_dbname }}?autoReconnect=true"
              p:username="{{ shibbolethidp_dbuser }}" p:password="{{ shibbolethidp_dbpassword }}"
              p:maxIdle="5" p:testOnBorrow="true" p:validationQuery="select 1" p:validationQueryTimeout="5" />
         <bean id="shibboleth.JPAStorageService" class="org.opensaml.storage.impl.JPAStorageService"
              p:cleanupInterval="%{idp.storage.cleanupInterval:PT10M}" c:factory-ref="shibboleth.JPAStorageService.entityManagerFactory"/>
         <bean id="shibboleth.JPAStorageService.entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
           <property name="packagesToScan" value="org.opensaml.storage.impl"/>
           <property name="dataSource" ref="shibboleth.JPAStorageService.DataSource"/>
           <property name="jpaVendorAdapter" ref="shibboleth.JPAStorageService.JPAVendorAdapter"/>
           <property name="jpaDialect">
             <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
           </property>
         </bean>

         <bean id="shibboleth.JPAStorageService.JPAVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
           <property name="database" value="MYSQL" />
         </bean>


- shell: mysql < /tmp/totp-schema.sql
  ignore_errors: yes

